<launch>

    <!-- Command-line arguments  -->
    <arg name="world" 
        default= "$(find cl_tsgrasp)/worlds/no_stone.sdf" 
        doc="Filename to a SDF World for gazebo to use" />
    <arg name="x"           
        default="-0.5"     
        doc="How far forward to place the base of the robot in [m]?" />
    <arg name="y"           
        default="0"     
        doc="How far leftwards to place the base of the robot in [m]?" />
    <arg name="z"           
        default="0"     
        doc="How far upwards to place the base of the robot in [m]?" />
    <arg name="roll"        
        default="0"     
        doc="How much to rotate the base of the robot around its X-axis in [rad]?" />
    <arg name="pitch"       
        default="0"     
        doc="How much to rotate the base of the robot around its Y-axis in [rad]?" />
    <arg name="yaw"         
        default="0"     
        doc="How much to rotate the base of the robot around its Z-axis in [rad]?" />
    <arg name="initial_joint_positions"
        doc="Initial joint configuration of the panda. Specify as a list of name/value pairs in form of '-J [name-of-joint] [value-in-rad]'. Default is a 90 degree bend in the elbow"
        default="-J panda_joint1 0.11
                    -J panda_joint2 -0.03
                    -J panda_joint3 0.067
                    -J panda_joint4 -1.568
                    -J panda_joint5 0
                    -J panda_joint6 1.571
                    -J panda_joint7 0" />

    <!-- Build the URDF and load onto the parameter server -->
    <param name="robot_description" 
        command="xacro $(find cl_tsgrasp)/urdf/panda_depth_cam.urdf.xacro 
            xyz:='$(arg x) $(arg y) $(arg z)'
            rpy:='$(arg roll) $(arg pitch) $(arg yaw)'"/>

    <!-- Load the roscontrol pids onto the parameter server -->
    <rosparam file="$(find panda_gazebo)/config/panda_control.yaml" 
        command="load" />

    <!-- Launch Gazebo-->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(arg world)" />
        <arg name="gui" value="true" />
        <arg name="paused" value="true"/>
    </include>

    <!-- Spawn the robot+depth cam model -->
    <node name="panda_model_spawner" 
        pkg="gazebo_ros" type="spawn_model" 
        args="-param robot_description -urdf -model panda -unpause $(arg initial_joint_positions)" />

    <!-- Load the controllers -->
    <node name="controller_spawner" 
        pkg="controller_manager" 
        type="spawner" 
        respawn="false" 
        output="screen" 
        args="joint_state_controller panda_hand_controller panda_arm_controller" />

    <!-- Set up MoveIt planning scene and trajectory execution -->
    <include file="$(find panda_moveit)/launch/move_group.launch"></include>

    <!-- Make robot_state_publisher to publish /joint_states topic -->
    <node name="robot_state_publisher" 
        pkg="robot_state_publisher" 
        type="robot_state_publisher" 
        respawn="true" 
        output="screen" />

    <!-- Start rviz gui with interactive marker -->
    <!-- <node name="rviz" 
        pkg="rviz" 
        type="rviz" 
        args="-d $(find panda_gazebo)/config/panda.rviz" /> -->

    <!-- Start moveit_servo node for cartesian end-effector velocity control -->
    <node name="servo_server" pkg="moveit_servo" type="servo_server" output="screen">
        <rosparam command="load" file="$(find cl_tsgrasp)/config/panda_moveit_servo.yaml" />
    </node>

    <node  pkg="rviz" type="rviz" output="screen" name="rviz" args="-d $(find cl_tsgrasp)/config/franka_sim_description_with_marker_and_pts.rviz"/>

        <!-- throttle the point cloud input to the network -->
    <node pkg="topic_tools" type="throttle" name="point_cloud_throttler" args="messages /camera/depth/points 8.0 /tsgrasp/points" />

    <!-- Grasp network node -->
    <node pkg="cl_tsgrasp" type="predict_grasps.py" name="predict_grasps" 
    output="screen" launch-prefix="xterm -hold -e"/>

    <!-- Node to select goal pose -->
    <node pkg="cl_tsgrasp" type="choose_grasps.py" name="choose_grasps" />

    <!-- Node to publish orbital pose -->
    <node pkg="cl_tsgrasp" type="publish_orbital_pose.py" name="publish_orbital_pose" />

    <!-- Node to publish end effector pose -->
    <node pkg="cl_tsgrasp" type="publish_ee_pose.py" name="publish_ee_pose" />

    <!-- Node to publish camera pose -->
    <node pkg="cl_tsgrasp" type="publish_cam_pose.py" name="publish_cam_pose" />

    <node pkg="topic_tools" type="relay" name="goal_pose_relayer" args="/tsgrasp/goal_pose /panda/cartesian_impedance_example_controller/equilibrium_pose" />

    <!-- Node to transform PoseStamped[] into PoseArray for rviz visualization -->
    <node pkg="topic_tools" type="transform" name="pose_translater"
        args="/tsgrasp/grasps /tsgrasp/grasps_pose geometry_msgs/PoseArray 'geometry_msgs.msg.PoseArray(header=m.header, poses=m.poses)' --import geometry_msgs --wait-for-start"/>
    
    <!-- Node to publish grasp poses for visualization -->
    <node pkg="cl_tsgrasp" type="grasp_pose_to_marker_array.py" name="grasp_markers" />

</launch>